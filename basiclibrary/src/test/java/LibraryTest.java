/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashSet;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void testRolls() {
        Library classUnderTest = new Library();
        assertTrue("rolls should return an array of integers containing n numbers, for this test n = 3", classUnderTest.rolls(3).length == 3);
    }
    @Test public void testDuplicates() {
        Library classUnderTest = new Library();
        int[] testTrue = new int[] {2, 2};
        int[] testFalse = new int[] {1, 2};
        assertTrue("duplicates should return true if the array contains a duplicate", classUnderTest.duplicates(testTrue));
        assertFalse("duplicates should return false if the array contains no duplicates", classUnderTest.duplicates(testFalse));
    }
    @Test public void testAverageValue() {
        Library classUnderTest = new Library();
        int[] testAverage = new int[] {1, 2, 3};
        assertEquals("averageValue should return the average as a provided array. For this test that is 2.", 2, classUnderTest.averageValue(testAverage));
    }
    @Test public void testAverageArray() {
        Library classUnderTest = new Library();
        int[][] testMatrix = new int[][]{
                {2, 2, 2, 2},
                {2, 2, 2, 2},
                {1, 1, 1, 1},
                {2, 2, 2, 2},
        };
        assertEquals("lowestAverageArray should return the array with the lowest average from a matrix of arrays. For this test that is the third array at index 2.", classUnderTest.lowestAverageArray(testMatrix), testMatrix[2]);
    }
    @Test public void testRollDSix() {
        Library classUnderTest = new Library();
        int rolledValue = classUnderTest.rollDSix();
        assertTrue("someLibraryMethod should return 'true'", (rolledValue >= 1 && rolledValue <= 6));
    }

    @Test public void testAnalyzeWeather () {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        Library classUnderTest = new Library();
        HashSet testRun = classUnderTest.analyzeWeather(weeklyMonthTemperatures);
        assertTrue("Returned type is an Integer HashSet", testRun instanceof HashSet);
        assertTrue("testRun contains temp data", testRun.contains(72));
        assertTrue("testRun contains temp data", testRun.contains(61));
        assertTrue("testRun contains temp data", testRun.contains(52));
        assertFalse("testRun contains no data not present originally", testRun.contains(0));
        assertFalse("testRun contains no data not present originally", testRun.contains(100));
        assertFalse("testRun contains no data not present originally", testRun.contains(99));
    }

    @Test public void testMaxTemp () {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        Library classUnderTest = new Library();
        HashSet testRun = classUnderTest.analyzeWeather(weeklyMonthTemperatures);
        assertEquals("Should return an integer of max temp, in this case 72", 72, classUnderTest.maxTemp(testRun));
    }

    @Test public void testMinTemp () {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        Library classUnderTest = new Library();
        HashSet testRun = classUnderTest.analyzeWeather(weeklyMonthTemperatures);
        assertEquals("Should return an integer of min temp, in this case 51", 51, classUnderTest.minTemp(testRun));
    }

    @Test public void testNotSeenTemps () {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        Library classUnderTest = new Library();
        HashSet testTemps = classUnderTest.analyzeWeather(weeklyMonthTemperatures);
        int max = classUnderTest.maxTemp(testTemps);
        int min = classUnderTest.minTemp(testTemps);
        StringBuffer testRun = classUnderTest.notSeenTemps(testTemps, max, min);
        assertTrue("returns a StringBuffer", testRun instanceof StringBuffer);
    }

    @Test public void testTally () {
        ArrayList<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");
        Library classUnderTest = new Library();
        String winner = classUnderTest.tally(votes);
        assertTrue("Returns a String", winner instanceof String);
        assertTrue("Returns Correct Winner", winner.contains("Bush"));
    }
}
